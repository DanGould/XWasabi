@using System.Linq.Expressions
<IonInput ValidationField="ValidationField" type="@Type" @bind-Value="Value" @attributes="InputAttributes">@ChildContent</IonInput>
@if (ShowPassword)
{
    <ion-icon slot="end" name="eye" class="eye" @onclick="TogglePassword"/>
}
else
{
    <ion-icon slot="end" name="eye-off" class="eye-off" @onclick="TogglePassword"/>
}

@code {

    [Parameter]
    public Expression<Func<object>> ValidationField { get; set; }
    
    [Parameter]
    public string Value
    {
        get => _value;
        set
        {
            if (value != _value)
            {
                _value = value;
                ValueChanged.InvokeAsync(_value);
            }
        }
    }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }


    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool ShowPassword
    {
        get => _showPassword;
        set
        {
            if (value != _showPassword)
            {
                _showPassword = value;
                ShowPasswordChanged.InvokeAsync(_showPassword);
            }
        }
    }

    [Parameter]
    public EventCallback<bool> ShowPasswordChanged { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    public string Type => ShowPassword ? "text" : "password";

    private bool _showPassword = false;
    private string _value;

    public void TogglePassword(MouseEventArgs _)
    {
        ShowPassword = !ShowPassword;
    }

}
