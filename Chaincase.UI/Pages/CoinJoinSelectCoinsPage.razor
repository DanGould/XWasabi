@page "/coinjoin/selectcoins"
@using NBitcoin
@using System.Reactive.Linq
@using Chaincase.Common
@using Chaincase.UI.Services
@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject StackService StackService
@inject SelectCoinsViewModel SelectCoinsViewModel
@inject CoinJoinViewModel CoinJoinViewModel
@inherits ReactiveComponentBase<SelectCoinsViewModel>


<IonContent>
    @if (!ViewModel.CoinList.Any())
    {
        <IonText class="ion-text-center">
            <p>Your coins will appear here</p>
        </IonText>
    }
    else
    {
        <IonList>
            @foreach (var coin in ViewModel.CoinList)
            {
                <IonItemSliding>
                    <IonItem button>
                        <IonCheckbox slot="start"
                                     @bind-Value="coin.IsSelected" />
                        <IonLabel slot="start">
                            <h3>â‚¿ @coin.Amount</h3>
                            <p>@coin.Clusters</p>
                        </IonLabel>
                        <IonNote slot="end" color="@(coin.AnonymitySet > Config.DefaultPrivacyLevelSome ? "success" : "warning")">
                            <ion-anchor @onclick="@(() => OpenCoinDetail(coin))">@coin.AnonymitySet</ion-anchor>
                        </IonNote>
                    </IonItem>
                    <IonItemOptions side="end">
                        <IonItemOption OnClick="@(() => OpenCoinDetail(coin))" color="default">Details</IonItemOption>
                    </IonItemOptions>
                </IonItemSliding>
            }
        </IonList>
    }

</IonContent>
<IonFooter>
    <IonCard color="light">
        <IonCardContent>
            @if (CoinJoinViewModel.RequiredBTC is not null)
            {
                <IonText color="secondary">
                    <p>
                        <strong>Select at least </strong>
                        <span class="ion-float-end">
                            @if (CoinJoinViewModel.HasSelectedEnough)
                            {<ion-icon color="success" name="checkmark-sharp" />}@CoinJoinViewModel.RequiredBTC BTC
                        </span>
                    </p>
                </IonText>

            }
            <IonText>
                <p>
                    <strong>
                        Amount selected 
                    </strong>
                    <span class="ion-float-end">
                        @ViewModel.SelectedAmount BTC
                    </span>
                </p>
            </IonText>
            @if (CoinJoinViewModel.HasTooManyInputs)
            {
                <IonText color="danger">
                    <p>
                        <strong>
                            Too many!
                        </strong>
                        <span class="ion-float-end">@CoinJoinViewModel.MaxInputsAllowed Max</span>
                    </p>
                </IonText>
            }

            <IonButton class="neu-button" OnClick='@StackService.InvokeStackState'
                       color="primary" expand="block"
                       disabled="@(!CoinJoinViewModel.HasSelectedEnough
                                   || CoinJoinViewModel.HasTooManyInputs)">CONTINUE</IonButton>
        </IonCardContent>
    </IonCard>
</IonFooter>
<CoinDetailModal @bind-Visible="@IsDetailModalVisible" @bind-CoinViewModel="@CurrentCoinViewModel" />

@code {

    private const int MaxInputsAllowed = 7;
    private string CoinSelectionRadios { get; set; }

    private bool IsDetailModalVisible { get; set; }

    private CoinViewModel CurrentCoinViewModel { get; set; }

    [Parameter]
    public string ReqInputAmountBTC { get; set; }

    protected override void OnParametersSet()
    {
        ViewModel = SelectCoinsViewModel;
        base.OnParametersSet();
        UiStateService.Title = "Select Coins";
    }

    private void OpenCoinDetail(CoinViewModel coin)
    {
        CurrentCoinViewModel = coin;
        IsDetailModalVisible = true;
    }
}
