@layout FullPageLayout
@page "/"
@using Chaincase.UI.Services
@using Chaincase.Common.Services

@inject ChaincaseWalletManager WalletManager
@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject PINViewModel PINViewModel
@inherits ReactiveComponentBase<PINViewModel>

<IonContent class="ion-padding-vertical">
    <EditForm EditContext="_editContext" OnSubmit="SubmitPassword">
        <SplashLogo></SplashLogo>
        <DataAnnotationsValidator/>
        <IonLabel id="passwordId" class="ion-padding" position="stacked">Enter Password</IonLabel>
        <IonItem ValidationField="() => Password" class="ion-invalid-shake">
            <IonPasswordInput ValidationField="() => Password" id="txt-password" IsNew="true" clear-on-edit="false" @bind-Value="Password" placeholder="e.g. margaretthatcheris110%SEXY" aria-labelledby="passwordId"/>
        </IonItem>
        <IonButton id="btn-load-wallet" class="neu-button ion-padding-horizontal" color="primary" type="submit" expand="block" disabled="@FormInvalid">LOG IN</IonButton>
    </EditForm>
    <IonLoading @bind-Visible="@ViewModel.IsBusy"/>
</IonContent>

@code {
    private string Password { get; set; }

    ValidationMessageStore _validationMessageStore;
    private EditContext _editContext;
    private bool FormInvalid => _editContext.GetValidationMessages().Any();

    protected override void OnInitialized()
    {
        ViewModel = PINViewModel;
        _editContext = new EditContext(this);
        _validationMessageStore = new ValidationMessageStore(_editContext);
        _editContext.OnValidationRequested += (sender, args) => _validationMessageStore.Clear();
        _editContext.OnFieldChanged += (sender, args) =>
        {
            _validationMessageStore.Clear(args.FieldIdentifier);
            _editContext.NotifyValidationStateChanged();
        };

        if (!(WalletManager).HasDefaultWalletFile())
            NavigationManager.NavigateTo("/landing");

        UiStateService.Title = "Chaincase";
        base.OnInitialized();
    }

    private async Task SubmitPassword()
    {
        try
        {
            await ViewModel.IsPasswordValidAsync(Password ?? "");
            NavigationManager.NavigateTo("/overview");
        }
        catch (Exception e)
        {
            _validationMessageStore.Add(() => Password, e.Message);
            _editContext.NotifyValidationStateChanged();
        }
    }

}
