@page "/new"
@using Chaincase.Common.Contracts
@using Chaincase.UI.Services
@using Chaincase.Common
@inject Global Global
@inject IHsmStorage HsmStorage
@inject NewPasswordViewModel vm
@inject UIStateService UiStateService
@inject NavigationManager NavigationManager

@inherits ReactiveComponentBase<NewPasswordViewModel>

<ion-content class="ion-padding">
    <EditForm EditContext="_editContext" OnSubmit="SubmitPassword">
        <h1>Set your password</h1>
        <IonItem ValidationField="() => Password">
            <ion-label floating>Password</ion-label>
             <IonPasswordInput ValidationField="() => Password" clear-on-edit="false" @bind-Value="@Password" placeholder="e.g. margaretthatcheris110%SEXY" />
        </IonItem>
        <IonValidationMessage ValidationField="() => Password"></IonValidationMessage>
        <IonButton type="submit" expand="block" disabled="@formInvalid">NEXT</IonButton>
    </EditForm>
</ion-content>

@code {

    bool formInvalid => _editContext.GetValidationMessages().Any();
    bool showPassword;
    string Password;
    EditContext _editContext;
    ValidationMessageStore _validationMessageStore;
    protected override void OnInitialized()
    {
        _editContext = new EditContext(this);
        
        _validationMessageStore = new ValidationMessageStore(_editContext);
        _editContext.OnValidationRequested += (sender, args) =>  _validationMessageStore.Clear();
        _editContext.OnFieldChanged += (sender, args) => _validationMessageStore.Clear(args.FieldIdentifier);
        ViewModel = vm;
        UiStateService.Title = "CREATE WALLET";
    }

    private void SubmitPassword()
    {
        try
        {
            ViewModel.SetPassword(Password);
        }
        catch (FormatException e)
        {
            _validationMessageStore.Add(() => Password, e.Message);
            _editContext.NotifyValidationStateChanged();
            return;
        }
        NavigationManager.NavigateTo("");
    }
    
}
