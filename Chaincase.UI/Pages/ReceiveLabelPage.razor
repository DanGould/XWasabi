@page "/receive"
@using Chaincase.UI.Services

@inject IJSRuntime JS
@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject ReceiveViewModel ReceiveViewModel
@inject StackService StackService
@inherits ReactiveComponentBase<ReceiveViewModel>


<IonContent class="ion-padding-vertical">
    <EditForm Model="ViewModel" OnValidSubmit="ApplyLabel">
        <DataAnnotationsValidator/>
        <IonLabel position="stacked">Add Label</IonLabel>
        <IonItem ValidationField="() => ViewModel.ProposedLabel">
            <IonInput @bind-Value="@ViewModel.ProposedLabel" placeholder="Who are you receiving from?"/>
        </IonItem>
        <div class="ion-padding">
            <IonValidationMessage ValidationField="() => ViewModel.ProposedLabel"/>
        </div>
        <IonCard color="primary">
            <IonCardContent>
                <strong>Info:</strong>
                Contact labels help keep your activity private and organized. This information is not shared.
            </IonCardContent>
        </IonCard>
        @* This hack is so that we can have a button outside of the form triggering the submission*@
        <input type="submit" id="btn-next" style="display: none"/>
    </EditForm>

</IonContent>
<IonFooter class="ion-padding">
    <IonButton button class="neu-button" color="primary" disabled="@IsContinueDisabled" expand="block"
               OnClick='() => JS.InvokeVoidAsync("IonicBridge.executeFunctionByName", "btn-next", "click")'>
        Continue
    </IonButton>
</IonFooter>

@code {

    protected override void OnInitialized()
    {
        ViewModel = ReceiveViewModel;
        UiStateService.Title = "RECEIVE BITCOIN";
    }

    private bool IsContinueDisabled => ViewModel.ProposedLabel.IsNullOrWhiteSpace();

    private void ApplyLabel()
    {
        if (ViewModel.ReceivePubKey == null)
        {
            ViewModel.InitNextReceiveKey();
        }
        else if (!ViewModel.ReceivePubKey.Label.Equals(ViewModel.ProposedLabel))
        {
            ViewModel.UpdateKeyLabel();
        }
        ViewModel.ProposedLabel = "";
        StackService.PushStackState(async () =>
        {
            ViewModel.ProposedLabel = ViewModel.ReceivePubKey.Label;
            await NavigationManager.NavigateBack(null, "/receive");
        });
        NavigationManager.NavigateTo("receive/address");
    }

}
