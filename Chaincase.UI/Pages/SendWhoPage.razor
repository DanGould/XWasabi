@page "/send/who"
@using Microsoft.AspNetCore.Components
@using Chaincase.Common.Contracts
@using Chaincase.UI.Services
@inject SendViewModel SendViewModel
@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject StackService StackService
@inject IJSRuntime JsRuntime
@inject IClipboard Clipboard
@inject ICameraScanner CameraScanner
@inherits ReactiveComponentBase<SendViewModel>

<IonContent>
    <div class="ion-padding-vertical">
        <IonItem>
            <IonLabel id="destination-label" position="stacked">Add Recipient Invoice *</IonLabel>
            <IonInput @bind-Value="ViewModel.DestinationString" placeholder="address/bitcoin:uri" aria-labelledby="destination-label" />
            <IonIcon @onclick="OnClickPaste" size="small" slot="end" name="clipboard-outline" aria-label="paste" />
            <IonIcon @onclick="OnClickScan" size="small" slot="end" name="scan-outline" aria-label="scan" />
        </IonItem>
        <IonItem>
            <IonLabel position="stacked">Name the Recipient *</IonLabel>
            <IonInput @bind-Value="@ViewModel.Label" placeholder="Who are you sending to?" />
        </IonItem>
    </div>
    <div class="ion-padding">
        <IonButton class="neu-button" OnClick="OnContinue" color="primary" expand="block" disabled="@(!IsAddressValid || IsLabelEmpty)">Continue</IonButton>
    </div>
    <IonCard class="ion-padding" color="primary">
        <IonCardContent>
            <strong>What's "recipient name?"</strong>
            E.g. "Apple" if you're sending them bitcoin right now. Labeling this transaction with
            the beneficiary helps Chaincase preserve your privacy.
            This name is for your eyes only. It's not shared with anyone. If you are sending to a wallet of your own, write "me"
        </IonCardContent>
    </IonCard>
</IonContent>

@code {
    private bool IsAddressValid => ViewModel.DestinationUrl?.Address !=  null;
    private bool IsLabelEmpty => ViewModel.Label.IsNullOrWhiteSpace();

    protected override void OnInitialized()
    {
        ViewModel = SendViewModel;
        UiStateService.Title = "Send";
    }

    private async Task OnClickScan()
    {
        ViewModel.DestinationString = await CameraScanner.Scan();
    }

    private async Task OnClickPaste()
    {
        ViewModel.DestinationString = await Clipboard.Paste();
    }

    public void OnContinue()
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(JsRuntime, "/send/who");
        });
        NavigationManager.NavigateTo("/send/amount");
    }

}
